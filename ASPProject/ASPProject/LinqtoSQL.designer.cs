#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASPProject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ForProject")]
	public partial class LinqtoSQLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertdetail(detail instance);
    partial void Updatedetail(detail instance);
    partial void Deletedetail(detail instance);
    partial void Insertcomplaint(complaint instance);
    partial void Updatecomplaint(complaint instance);
    partial void Deletecomplaint(complaint instance);
    #endregion
		
		public LinqtoSQLDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ForProjectConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqtoSQLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqtoSQLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqtoSQLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqtoSQLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<detail> details
		{
			get
			{
				return this.GetTable<detail>();
			}
		}
		
		public System.Data.Linq.Table<complaint> complaints
		{
			get
			{
				return this.GetTable<complaint>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.details")]
	public partial class detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Fnm;
		
		private string _lnm;
		
		private string _eno;
		
		private string _mob;
		
		private string _email;
		
		private string _pass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFnmChanging(string value);
    partial void OnFnmChanged();
    partial void OnlnmChanging(string value);
    partial void OnlnmChanged();
    partial void OnenoChanging(string value);
    partial void OnenoChanged();
    partial void OnmobChanging(string value);
    partial void OnmobChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpassChanging(string value);
    partial void OnpassChanged();
    #endregion
		
		public detail()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fnm", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Fnm
		{
			get
			{
				return this._Fnm;
			}
			set
			{
				if ((this._Fnm != value))
				{
					this.OnFnmChanging(value);
					this.SendPropertyChanging();
					this._Fnm = value;
					this.SendPropertyChanged("Fnm");
					this.OnFnmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lnm", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string lnm
		{
			get
			{
				return this._lnm;
			}
			set
			{
				if ((this._lnm != value))
				{
					this.OnlnmChanging(value);
					this.SendPropertyChanging();
					this._lnm = value;
					this.SendPropertyChanged("lnm");
					this.OnlnmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eno", DbType="VarChar(11) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string eno
		{
			get
			{
				return this._eno;
			}
			set
			{
				if ((this._eno != value))
				{
					this.OnenoChanging(value);
					this.SendPropertyChanging();
					this._eno = value;
					this.SendPropertyChanged("eno");
					this.OnenoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mob", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string mob
		{
			get
			{
				return this._mob;
			}
			set
			{
				if ((this._mob != value))
				{
					this.OnmobChanging(value);
					this.SendPropertyChanging();
					this._mob = value;
					this.SendPropertyChanged("mob");
					this.OnmobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pass", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string pass
		{
			get
			{
				return this._pass;
			}
			set
			{
				if ((this._pass != value))
				{
					this.OnpassChanging(value);
					this.SendPropertyChanging();
					this._pass = value;
					this.SendPropertyChanged("pass");
					this.OnpassChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.complaints")]
	public partial class complaint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Enr;
		
		private string _Comp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnrChanging(string value);
    partial void OnEnrChanged();
    partial void OnCompChanging(string value);
    partial void OnCompChanged();
    #endregion
		
		public complaint()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enr", DbType="VarChar(11) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Enr
		{
			get
			{
				return this._Enr;
			}
			set
			{
				if ((this._Enr != value))
				{
					this.OnEnrChanging(value);
					this.SendPropertyChanging();
					this._Enr = value;
					this.SendPropertyChanged("Enr");
					this.OnEnrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comp", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Comp
		{
			get
			{
				return this._Comp;
			}
			set
			{
				if ((this._Comp != value))
				{
					this.OnCompChanging(value);
					this.SendPropertyChanging();
					this._Comp = value;
					this.SendPropertyChanged("Comp");
					this.OnCompChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
